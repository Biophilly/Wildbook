
#### this section redirects http (non-secure) domains https

upstream tomcatng {
    server 127.0.0.1:8080 fail_timeout=0;
}


server {
	server_name nextgen.dev-wildbook.org;
	listen 80;
	return 308 https://nextgen.dev-wildbook.org$request_uri;
}

#https
## h/t https://community.letsencrypt.org/t/nginx-configuration-sample/2173
server {
  	server_name nextgen.dev-wildbook.org;
	client_max_body_size 2g;


	#proxy_cache wildbook_cache;
	#proxy_cache_key "$user_agent_wildbook$request_uri";
	proxy_cache_min_uses 1;
	proxy_cache_valid 200 302 120m;
	proxy_cache_valid 404 1m;
	proxy_cache_use_stale error timeout invalid_header http_500 http_502 http_503 http_504;
	#set $no_cache "";
	#Any logged-in user's requests will not be cached and served directly by tomcatng. (Cookie based caching rule)
	#if ($http_cookie ~* "JSESSIONID*"){
	#	set $no_cache 1;
	#}
	#proxy_no_cache $no_cache;
	#proxy_cache_bypass $no_cache;
	
			 proxy_connect_timeout       2400s;
		 proxy_send_timeout          3600s;
		 proxy_read_timeout          3600s;
		send_timeout                3600s;

	#think these are all the same has http -- is there a way to avoid this duplication?
	location / {
		#include proxy_params;
		#proxy_pass http://tomcatng;
		return 200 'nextgen';
		add_header Content-type text/plain;
	}


	###
	###   https://github.com/mmatuska/lua-tus-server
	###

	#   apt-get install nginx-extras    [this has support for lua, and lots of other magick]
	#   apt-get install lua-cjson
	#   https://github.com/openresty/lua-resty-string    [doesnt seem to be a package. :( ]
	#   https://github.com/thibaultcha/lua-resty-jit-uuid
	#
	#   * then these go in ngingx.conf (with proper path):
	#     lua_package_path "/usr/share/lua/lua-resty-jit-uuid/lib/?.lua;/usr/share/lua/lua-resty-string/lib/?.lua;/usr/share/lua/lua-tus-server/lib/?.lua;;";
	#     lua_shared_dict tuslock 10m;

#3fb5dfbc-01f0-4c19-a344-a1cafa5137b1
        #location ~ "^/uploadTest_([a-z0-9\-]{5}).*" {
        location /api/tus {
             content_by_lua_block {
		local tmp_path = "/data/tmp_tus_files"
		local target_path = "/data/tus_files"
                local tus_server = require "tus.server"
                local tus = tus_server:new()
		-- local id = string.sub(ngx.var.request_uri, 13)
-- local id = ngx.var.cookie_JSESSIONID
		local uuid = require 'resty.jit-uuid'
local id = "__SESSIONID__" .. uuid()
                tus.config.storage_backend = "tus.storage_file"
                tus.config.storage_backend_config.storage_path = tmp_path
                tus.config.storage_backend_config.lock_zone = ngx.shared.tuslock
                tus.config.upload_url = "/api/tus"
                -- tus.config.upload_url = ngx.var.request_uri
                tus.config.expire_timeout = 1209600
                tus:process_request()

                if tus.resource.name and tus.resource.state == "completed" then
                    local path = tus.sb:get_path(tus.resource.name)
                    local info_path = tus.sb:get_info_path(tus.resource.name)
                    -- os.rename(path, tmp_path .. id .. "/" .. tus.resource.name);
                    os.rename(path, target_path .. "/" .. id .. "_" .. tus.resource.name)
                    os.rename(info_path, target_path .. "/" .. id .. "_" .. tus.resource.name .. ".json")
                    -- tus.sb:delete(tus.resource.name)
                end
            }
        }

	location /TEST {
		alias /data/nextgen/test;
	}
	location /tmp_tus_files {
		alias /data/tmp_tus_files;
		autoindex on;
	}
	location /tus_files {
		alias /data/tus_files;
		autoindex on;
	}


	listen 443 ssl;

	ssl_certificate         /etc/letsencrypt/live/nextgen.dev-wildbook.org/fullchain.pem;
	ssl_certificate_key     /etc/letsencrypt/live/nextgen.dev-wildbook.org/privkey.pem;
	#ssl_trusted_certificate /etc/letsencrypt/live/nextgen.dev-wildbook.org/fullchain.pem;
	ssl_session_timeout 1d;
	ssl_session_cache shared:SSL:50m;

	# Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
	# Generate with:
	#   openssl dhparam -out /etc/nginx/dhparam.pem 2048
	ssl_dhparam /etc/nginx/dhparam.pem;

	# What Mozilla calls "Intermediate configuration"
	# Copied from https://mozilla.github.io/server-side-tls/ssl-config-generator/
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
	ssl_prefer_server_ciphers on;

	# HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
	add_header Strict-Transport-Security max-age=15768000;

	# OCSP Stapling
	# fetch OCSP records from URL in ssl_certificate and cache them
	######ssl_stapling on;
	######ssl_stapling_verify on;

	# If you want to specify a DNS resolver for stapling, you can uncomment the below
	# line. If you leave it commented, nginx will use your system resolver, which will probably
	# work just fine!
	# resolver <IP DNS resolver>;
}

